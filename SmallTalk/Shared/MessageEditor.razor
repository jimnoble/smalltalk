@using EventAggregator.Blazor;
@using SmallTalk.Data;
@using SmallTalk.Data.Schema;
@inject IJSRuntime JSRuntime
@inject IMessageDateRepository MessageDateRepository
@inject IEventAggregator EventAggregator

<div class="editor">
    <div>
        <span id="content1" class="textarea" role="textbox" contenteditable></span>
    </div>
    <div class="tool-strip">
        <a href="#" class="button">
            <span class="glyphicon glyphicon-paperclip"></span>
            <span>Attach</span>
        </a>
        <div class="actions">
            <a id="send1" class="success button" @onclick=SendAsync>
                <span class="glyphicon glyphicon-send"></span>
                <span>Send</span>
            </a>
        </div>
    </div>
</div>

@code 
{
    public string Text { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setEditorText", Text ?? string.Empty);

        await JSRuntime.InvokeVoidAsync("configureEditorContentArea");
    }

    public void EditMessage(Message message)
    {
        Text = message.Content;
    }

    public async Task SendAsync()
    {
        var text = (await JSRuntime.InvokeAsync<string>("getEditorText")).Replace(@" ", " ").Trim();

        await MessageDateRepository.AppendMessageAsync(
            channel: "alchemy",
            date: DateTime.UtcNow,
            message: new Message(
                MessageId: Guid.NewGuid(),
                Channel: "alchemy",
                Author: "jimnoble@gmail.com",
                WriteTime: DateTime.UtcNow,
                ParentMessageDate: null,
                ParentMessageId: null,
                Content: text,
                Attachments: Array.Empty<Attachment>(),
                Reactions: Array.Empty<Reaction>()));

        Text = "";

        //StateHasChanged();

        await EventAggregator.PublishAsync(new MessagePublishedEvent());

        await OnSubmit.InvokeAsync();
    }
}
