@using EventAggregator.Blazor;
@using SmallTalk.Data;
@using SmallTalk.Data.Schema;
@inject IJSRuntime JSRuntime
@inject IMessageDateRepository MessageDateRepository
@inject IEventAggregator EventAggregator

<div class="editor">
    <div>
        <span id="content1" @ref="textArea" class="textarea" role="textbox" contenteditable></span>
    </div>
    <div class="tool-strip">
        <a href="#" class="button">
            <span class="glyphicon glyphicon-paperclip"></span>
            <span>Attach</span>
        </a>
        <div class="actions">
            @if (EditingMessage.HasValue)
            {
                <a class="cancel button" @onclick=CancelEditAsync>
                    <span class="glyphicon glyphicon-ban-circle"></span>&nbsp;
                    <span>Cancel</span>
                </a>
                <a id="send1" class="success button" @onclick=SubmitEditAsync>
                    <span class="glyphicon glyphicon-check"></span>&nbsp;
                    <span>Update</span>
                </a>
            }
            else
            {
                <a id="send1" class="success button" @onclick=SendAsync>
                    <span class="glyphicon glyphicon-send"></span>&nbsp;
                    <span>Send</span>
                </a>                
            }
        </div>
    </div>
</div>

@code 
{
    ElementReference textArea;

    public string Text { get; set; }

    public Message? EditingMessage { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setEditorText", Text ?? string.Empty);

        await JSRuntime.InvokeVoidAsync("configureEditorContentArea");
    }

    public void EditMessage(Message message)
    {
        Text = message.Content;

        EditingMessage = message;
    }

    public async Task SendAsync()
    {
        var text = (await JSRuntime.InvokeAsync<string>("getEditorText")).Replace(@" ", " ").Trim();

        await MessageDateRepository.AppendMessageAsync(
            channel: "alchemy",
            date: DateTime.UtcNow,
            message: new Message(
                MessageId: Guid.NewGuid(),
                Channel: "alchemy",
                Author: "jimnoble@gmail.com",
                WriteTime: DateTime.UtcNow,
                ParentMessageDate: null,
                ParentMessageId: null,
                Content: text,
                Attachments: Array.Empty<Attachment>(),
                Reactions: Array.Empty<Reaction>()));

        Text = "";

        //StateHasChanged();

        await EventAggregator.PublishAsync(new MessagePublishedEvent());

        await OnSubmit.InvokeAsync();
    }

    async Task CancelEditAsync()
    {
        Text = string.Empty;

        EditingMessage = null;

        StateHasChanged();
    }

    async Task SubmitEditAsync()
    {
        var message = EditingMessage.Value;

        var text = (await JSRuntime.InvokeAsync<string>("getEditorText")).Replace(@" ", " ").Trim();

        await MessageDateRepository.AppendMessageAsync(
            channel: "alchemy",
            date: message.WriteTime.Date,
            message: new Message(
                MessageId: message.MessageId,
                Channel: message.Channel,
                Author: message.Author,
                WriteTime: DateTime.UtcNow,
                ParentMessageDate: message.ParentMessageDate,
                ParentMessageId: message.ParentMessageId,
                Content: text,
                Attachments: Array.Empty<Attachment>(),
                Reactions: Array.Empty<Reaction>()));

        Text = string.Empty;

        EditingMessage = null;

        StateHasChanged();

        await EventAggregator.PublishAsync(new MessagePublishedEvent());
    }

    public async Task FocusEditorAsync()
    {
        await textArea.FocusAsync();

        await JSRuntime.InvokeVoidAsync("focusEditor");
    }
}
