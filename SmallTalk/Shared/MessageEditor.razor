@using EventAggregator.Blazor;
@using SmallTalk.Data;
@using SmallTalk.Data.Schema;
@inject IJSRuntime JSRuntime
@inject IMessageDateRepository MessageDateRepository
@inject IEventAggregator EventAggregator

<div class="editor">
    <div>
        <span id="content1" @ref="textArea" class="textarea" role="textbox" contenteditable></span>
    </div>
    <div class="tool-strip">
        @if (Attachment == null)
        {
            <label for="file-upload" class="button">
                <span class="glyphicon glyphicon-paperclip"></span>
                <span>Attach</span>
            </label>            
        }
        else
        {
            <a class="button" @onclick=RemoveAttachment>
                <span class="glyphicon glyphicon-file"></span>
                <span>@Attachment.Value.Label</span>
                <span class="subtle">@Attachment.Value.ContentType</span>
                <span class="subtle">@FormatFileSize(Attachment.Value.SizeBytes)</span>
                <span class="glyphicon glyphicon-trash"></span>
            </a>
        }
        <InputFile id="file-upload" class="file-upload button" OnChange=@LoadFilesAsync multiple />
        <div class="actions">
            @if (EditingMessage.HasValue)
            {
                <a class="cancel button" @onclick=CancelEditAsync>
                    <span class="glyphicon glyphicon-ban-circle"></span>&nbsp;
                    <span>Cancel</span>
                </a>
                <a id="send1" class="success button" @onclick=SubmitEditAsync>
                    <span class="glyphicon glyphicon-check"></span>&nbsp;
                    <span>Update</span>
                </a>
            }
            else
            {
                <a id="send1" class="success button" @onclick=SendAsync>
                    <span class="glyphicon glyphicon-send"></span>&nbsp;
                    <span>Send</span>
                </a>                
            }
        </div>
    </div>
</div>

@code 
{
    ElementReference textArea;

    Attachment? Attachment { get; set; }

    public string Text { get; set; }

    public Message? EditingMessage { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public string ChannelName { get; set; }

    [Parameter]
    public User User { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setEditorText", Text ?? string.Empty);

        await JSRuntime.InvokeVoidAsync("configureEditorContentArea");
    }

    public async Task EditMessageAsync(Message message)
    {
        Text = message.Content.Replace(" ", " ");

        EditingMessage = message;

        Attachment = message.Attachments.Any() ? message.Attachments.First() : null;

        await textArea.FocusAsync();

        await JSRuntime.InvokeVoidAsync("focusEditor");
    }

    public async Task SetEditorTextAsync(string text)
    {
        Text = text;

        await JSRuntime.InvokeVoidAsync("setEditorText", Text ?? string.Empty);
    }

    public async Task SendAsync()
    {
        var text = (await JSRuntime.InvokeAsync<string>("getEditorText")).Replace(@" ", " ").Trim();

        var attachments = Attachment.HasValue ? 
            new[] 
            { 
                new Attachment(
                    AttachmentId: Attachment.Value.AttachmentId,
                    Label: Attachment.Value.Label,
                    ContentType: Attachment.Value.ContentType,
                    SizeBytes: Attachment.Value.SizeBytes,
                    Url: Attachment.Value.Url) 
            } : 
            Array.Empty<Attachment>();

        await MessageDateRepository.AppendMessageAsync(
            channel: ChannelName,
            date: DateTime.UtcNow,
            message: new Message(
                MessageId: Guid.NewGuid(),
                Channel: ChannelName,
                Author: User.Email,
                WriteTime: DateTime.UtcNow,
                ParentMessageDate: null,
                ParentMessageId: null,
                Content: text,
                Attachments: attachments,
                Reactions: Array.Empty<Reaction>()));

        Text = "";

        Attachment = null;

        await EventAggregator.PublishAsync(new MessagePublishedEvent(WasEdit: false));

        await OnSubmit.InvokeAsync(true);
    }

    void RemoveAttachment()
    {
        Attachment = null;
    }

    async Task CancelEditAsync()
    {
        Text = string.Empty;

        EditingMessage = null;

        Attachment = null;

        StateHasChanged();
    }

    async Task SubmitEditAsync()
    {
        var message = EditingMessage.Value;

        var text = (await JSRuntime.InvokeAsync<string>("getEditorText")).Replace(@" ", " ").Trim();

        var attachments = Attachment.HasValue ?
            new[]
            {
                new Attachment(
                    AttachmentId: Attachment.Value.AttachmentId,
                    Label: Attachment.Value.Label,
                    ContentType: Attachment.Value.ContentType,
                    SizeBytes: Attachment.Value.SizeBytes,
                    Url: Attachment.Value.Url)
            } :
            Array.Empty<Attachment>();

        await MessageDateRepository.AppendMessageAsync(
            channel: ChannelName,
            date: message.WriteTime.Date,
            message: new Message(
                MessageId: message.MessageId,
                Channel: message.Channel,
                Author: message.Author,
                WriteTime: DateTime.UtcNow,
                ParentMessageDate: message.ParentMessageDate,
                ParentMessageId: message.ParentMessageId,
                Content: text,
                Attachments: attachments,
                Reactions: Array.Empty<Reaction>()));

        Text = string.Empty;

        EditingMessage = null;

        Attachment = null;
        
        StateHasChanged();

        await EventAggregator.PublishAsync(new MessagePublishedEvent(WasEdit: true));

        await OnSubmit.InvokeAsync(false);
    }

    async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            var attachmentId = Guid.NewGuid();

            var outputPath = Path.Combine(
                Directory.GetCurrentDirectory(), 
                $"wwwroot/content/uploaded/{attachmentId:N}");

            Directory.CreateDirectory(outputPath);

            await using FileStream fs = new(
                Path.Combine(outputPath, file.Name),
                FileMode.Create);

            await file.OpenReadStream(100_000_000).CopyToAsync(fs);

            Attachment = new Attachment(
                AttachmentId: attachmentId,
                Url: $"/content/uploaded/{attachmentId:N}/{file.Name}",
                Label: file.Name,
                ContentType: file.ContentType,
                SizeBytes: file.Size);
        }
    }

    string FormatFileSize(long length)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = length;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
        // show a single decimal place, and no space.
        return string.Format("{0:0.##} {1}", len, sizes[order]);
    }
}
