@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace SmallTalk.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    @*<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />*@
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css" rel="stylesheet">
    <link href="css/site.css" rel="stylesheet" />
    @*<link href="SmallTalk.styles.css" rel="stylesheet" />*@
    <link rel="icon" type="image/png" href="favicon.png"/>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap" rel="stylesheet">   
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    <script type="text/javascript">
                        ï»¿
        function setEditorText(value) {
            var element = document.getElementById('content1')
            element.innerText = value;
            placeCaretAtEnd(element);
        }

        function getEditorText() {
            return document.getElementById('content1').innerText;
        }

        function scrollToBottom(element) {
            element.scrollTop = element.scrollHeight;
        }

        function configureEditorContentArea() {
            var element = document.getElementById('content1');
            element.onkeypress = function (evt) {
                if (evt.keyCode == 13) {
                    if (evt.shiftKey) {
                        console.log('new line!');
                    }
                    else {
                        evt.preventDefault()
                        evt.stopPropagation() // Stop default handling

                        console.log('submit!');

                        clickSendButton();
                    }
                }
            }
        }

        function clickSendButton() {
            document.getElementById('send1').click();
        }

        function focusEditor() {
            var element = document.getElementById('content1');
            element.focus();
        }

        function playSound() {
            var element = document.getElementById('audio1');
            element.currentTime = 0;
            element.play();
        }

        function BlazorContentEditable(DivID, Instance, TextToDisplay) {

            //set prefilled text
            document.getElementById(DivID).innerHTML = TextToDisplay;

            //set initial height
            SetHeight(DivID);
    
            //set event listener
            document.getElementById(DivID).addEventListener("input", function () {
                Instance.invokeMethodAsync("GetUpdatedTextFromJavascript", document.getElementById(DivID).value);
                SetHeight(DivID);
            });
        }

        function SetValue(DivID, TextToDisplay) {
            //set prefilled text
            console.info(document.getElementById(DivID))

            document.getElementById(DivID).innerHTML = TextToDisplay;
            alert('setting to ' + TextToDisplay);
        }

        function SetHeight(DivID) {

            //reset to original height
            document.getElementById(DivID).style.height = 'auto';

            //from https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/
            // Get the computed styles for the element
            var computed = window.getComputedStyle(document.getElementById(DivID));

            // Calculate the height
            var height = parseInt(computed.getPropertyValue('border-top-width'), 10)
                + document.getElementById(DivID).scrollHeight
                + parseInt(computed.getPropertyValue('border-bottom-width'), 10);

            //set the height
            document.getElementById(DivID).style.height = (height + 'px');

        }

        function placeCaretAtEnd(el) {
            
            el.focus();
            if (typeof window.getSelection != "undefined"
                    && typeof document.createRange != "undefined") {
                var range = document.createRange();
                range.selectNodeContents(el);
                range.collapse(false);
                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            } else if (typeof document.body.createTextRange != "undefined") {
                var textRange = document.body.createTextRange();
                textRange.moveToElementText(el);
                textRange.collapse(false);
                textRange.select();
            }
        }

        function setFavicon(url) {
            var link = document.querySelector("link[rel~='icon']");
            if (!link) {
                link = document.createElement('link');
                link.rel = 'icon';
                document.head.appendChild(link);
            }
            link.href = url;
        }

        window.isVisible = true;

        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                console.log('became hidden');
                window.isVisible = false;
            }
            else {
                console.log('became visible');
                window.isVisible = true;
                setFavicon('favicon.png');
            }
        });

        function getIsVisible() {
            return window.isVisible;
        }

        function observeScrollable(scrollableId, scrollToBottomNow) {
            console.log('observeScrollable called')
            var scrollable = document.getElementById(scrollableId)
            if (scrollToBottomNow || window.magnet) scrollToBottom(scrollable)
            window.scrollable = scrollable
            new ResizeObserver(scrollableResized).observe(scrollable)
        }

        function scrollableResized() {
            console.log('scrollableResized called')
        }

        function scrollableScrolled() {
            var scrollable = window.scrollable
            var bottomedOut = Math.abs((scrollable.scrollTop + scrollable.getBoundingClientRect().height) - scrollable.scrollHeight) < 0.5
            if (bottomedOut && !window.magnet) {
                console.log('magnet on')
                window.magnet = true
            }
            else if (!bottomedOut && window.magnet) {
                console.log('magnet off')
                window.magnet = false
            }             
        }

    </script>

    <script src="_framework/blazor.server.js"></script>
    @*<script src="_content/BlazorContentEditable/BlazorContentEditable.js"></script>*@
</body>
</html>
